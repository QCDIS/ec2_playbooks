- ec2:
    key_name: "{{ssh_key_name}}"
#     group: "{{security_group_name}}"
    group_id: sg-0d31082d649c3817f
    instance_type: "{{flavor}}"
    image: "{{image_id}}"
    region: "{{region}}"
    wait: yes
    volumes:
      - device_name: "{{volume_path}"
        volume_type: "{{volume_type_name}}"
        volume_size: "{{volume_size_num}}"
        delete_on_termination: true
    monitoring: no
    vpc_subnet_id: "{{subnet_id}}"
    assign_public_ip: yes
  register: ec2_output
  when: volume_path is defined
  
  
- ec2:
    key_name: "{{ssh_key_name}}"
#     group: "{{security_group_name}}"
    group_id: sg-0d31082d649c3817f
    instance_type: "{{flavor}}"
    image: "{{image_id}}"
    region: "{{region}}"
    wait: yes
    monitoring: no
    vpc_subnet_id: "{{subnet_id}}"
    assign_public_ip: yes
    state: "{{ state }}"
  register: ec2_output
  when: volume_path is not defined
  
- debug:
    var: ec2_output
    
# - ec2_instance_info:
#     instance_ids:
#       - "{{ec2_output['instance_ids'][0]}}"
#     region: "{{region}}"
#   register: ec2_instance_info_output
  
# - debug:
#     var: ec2_instance_info_output
    
- local_action: copy content={{ ec2_output }} dest=/tmp/{{random_name}}_ec2_output.json

- shell:  jq '.instances[0] | {"{{ item.key }}":{public_ip:.public_ip,node_type:.instance_type,id:.id,public_dns_name:.public_dns_name}}' /tmp/{{random_name}}_ec2_output.json
  register: vm_provision_attributes
  
     
- set_stats:
    data:
      vm: "{{ vm_provision_attributes.stdout }}"
